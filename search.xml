<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[test]]></title>
      <url>%2F2017%2F01%2F31%2Ftest%2F</url>
      <content type="text"><![CDATA[——这是一个测试页面—————————Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sequi porro laborum, dolorum blanditiis nobis repellendus est reiciendis quis dolores? Rem cupiditate quaerat tenetur quod fuga voluptatem quasi, ea aliquid et?Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sequi porro laborum, dolorum blanditiis nobis repellendus est reiciendis quis dolores? Rem cupiditate quaerat tenetur quod fuga voluptatem quasi, ea aliquid et?Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sequi porro laborum, dolorum blanditiis nobis repellendus est reiciendis quis dolores? Rem cupiditate quaerat tenetur quod fuga voluptatem quasi, ea aliquid et? &lt;!– more – &gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sequi porro laborum, dolorum blanditiis nobis repellendus est reiciendis quis dolores? Rem cupiditate quaerat tenetur quod fuga voluptatem quasi, ea aliquid et?Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sequi porro laborum, dolorum blanditiis nobis repellendus est reiciendis quis dolores? Rem cupiditate quaerat tenetur quod fuga voluptatem quasi, ea aliquid et?]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F01%2F30%2Fhello-world%2F</url>
      <content type="text"><![CDATA[迎着新年，终于在这里插下我的第一篇博文，实在令人兴奋不已，其实在这个过程中，经历了许许多多的trouble,之后踩着坑，一步步搞出来。介绍一下，我呢叫CC，一名前端小生，想要快快的实习工作，学到更多的经验和技能。So，在以后的日子里，我会写一些自己感觉有趣的博文，不论如何，这里是我的一个小小的bay。alert(“Hello world”); HEXO在第一篇里，肯定会说一说hexo的。 准备工作 安装node.js，git和申请github账号，这些是必要配置，网上有很多的教程可以去参考，所以这里就略过…. 开始安装HEXO npm install hexo -g； 新建一个文件，就叫blogs吧，在blogs下用命令行 hexo init ； 其文件结构如图 生成、部署页面 如果到这里，你可以小小的得意一下，接下来测试页面；再回到git命令行,依次敲下hexo g hexo s,然后游览器地址栏http://localhost:4000,当你看到了HEXO，那就成功了一大步。在HEXO有许多优秀的的主题，具体在这里，我用的是NexT，它们都有着详细的使用手册。 下来就着重是_config.yml的配置问题。首先就要搞的是deploy. 如图 之后就可以提交么？ no，当然不行。 在你生成SSH秘钥之前,如果你有任意一个SSH秘钥,你都要检测一下; 第一步 检测电脑中是否已有SSH 秘钥检测步骤: 1. 在任意目录右键,选择 Git Bash2. 输入 ls -al ~/.ssh 命令查看是否存在SSH秘钥ls -al ~/.ssh 3. 如果你看到有公共的SSH秘钥已经存在的话,请检测SSH列表的路径;默认情况下,公共秘钥的文件名是下列之一: id_dsa.pubid_ecdsa.pubid_ecdsa.pubid_ecdsa.pub 如果没有一个现有的公共和私有密钥，或者不希望使用任何可用的SSH秘钥来连接到GitHub上，请生成一个新的SSH密钥。如果你看到列出现有的公共和私有密钥（例如id_rsa.pub和id_rsa ），你想使用连接到GitHub上，你可以将你的SSH密钥放到ssh-agent(下面会写到) . 小贴士:如果你看到的〜/ .ssh不存在或者错误，不要担心！我们将创建它，并生成一个新的SSH密钥 第二步生成新的SSH密钥并将其添加到ssh-agent中 在任意目录右键,选择Git Bash 1. 输入ssh-keygen -t rsa -b 4096 -C “your_email@example.com” (将邮箱替换为你自己的地址)2. 当你提示“输入要保存密钥的文件”，然后按Enter键。接受默认文件位置。Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter] 3. 在提示符下，键入一个安全密码(可以为空)。有关详细信息，请参阅“使用SSH密钥口令”一节。Enter passphrase (empty for no passphrase): [Type a passphrase] Enter same passphrase again: [Type passphrase again] 4. 将ssh秘钥添加到 ssh-agent,在任意目录右键,选择Git Bash后输入命令确保ssh-agent的启用$ eval &quot;$(ssh-agent -s)&quot; Agent pid 59566 添加你的SSH密钥到ssh-agent 。如果你使用现有的SSH密钥，而不是生成新的SSH密钥，你需要替换现有的私有密钥文件的名称，以取代id_rsa的命令。 $ ssh-add ~/.ssh/id_rsa 添加新的SSH密钥到你的帐户GitHub中 要配置GitHub的帐户需要使用新的（或现有的） SSH密钥，你还需要将其添加到你的帐户GitHub中。 5.复制SSH密钥到剪贴板小贴士:如果你的SSH密钥文件具有与示例代码不同的名称，请修改文件名，以符合当前的设置。当复制你的秘钥时，不添加任何新行或空格。 $ clip &lt; ~/.ssh/id_rsa.pub 小贴士:如果clip命令没有执行，你可以找到隐藏的.ssh文件夹中，打开你喜欢的文本编辑器文件，并将其复制到剪贴板,一般是在C:\Users\yourname.ssh文件夹下的id_rsa.pub文件中,使用文本文档打开后复制内容即可 用户头像→Settings→SSH and GPG keys→New SSH key→将id_rsa.pub中的内容复制到Key文本框中，然后点击Add SSH key(添加SSH)按钮。 添加一个ssh key. 测试SSH秘钥是否添加成功 打开git bash 输入命令： ssh -T git@github.com当提示到： Hi username! You’ve successfully authenticated, but GitHub does notprovide shell access. 那就成功了，然后上传试试。 第三步 上传至github在blogs下git bash中输入： hexo d(deploy)当看到git done那就成功了。至此，你已经走过了一大半的路了 以上 ssh key部分来源这里，剩下的之后补充。]]></content>
    </entry>

    
  
  
</search>
